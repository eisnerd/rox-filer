dnl Process this file with autoconf to produce a configure script.
AC_INIT(main.c)
AC_CONFIG_HEADER(config.h)

AC_ARG_WITH(platform,
[  --with-platform	  platform name, as detected by AppRun],
[AC_SUBST(with_platform)],
[
AC_MSG_ERROR([

Please do not run 'configure' manually - instead, run the AppRun script with
the --compile option, like this:
	$ ROX-Filer/AppRun --compile

Thank you.
])
])

dnl rox_ARG_WITH(PACKAGE, HELP-STRING, ACTION-IF-TRUE [, ACTION-IF-FALSE])
dnl This macro does the same thing as AC_ARG_WITH, but it also defines
dnl with_PACKAGE_arg and with_PACKAGE_sign to avoid complicated logic later.
dnl Stolen from icewm's configure.in
AC_DEFUN(rox_ARG_WITH, [
AC_ARG_WITH([$1], [$2], [
case "[${with_]patsubst([$1], -, _)}" in
[no)]
 [with_]patsubst([$1], -, _)_sign=no
 ;;
[yes)]
 [with_]patsubst([$1], -, _)_sign=yes
 ;;
[*)] 
 [with_]patsubst([$1], -, _)_arg="[${with_]patsubst([$1], -, _)}"
 [with_]patsubst([$1], -, _)_sign=yes
 ;;
esac
$3
], [$4])])

dnl rox_CHECK_EXISTS(PROGRAM, ERROR)
dnl Ensure that PROGRAM --version works.
dnl Stops and displays ERROR if it's missing.
AC_DEFUN(rox_CHECK_EXISTS, [
AC_MSG_CHECKING(that $1 runs)
if "$1" --version > /dev/null 2>&1 ; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
  AC_MSG_ERROR([*** Missing program ***

$1 failed to run - make sure it is inside one of the
directories in your PATH environment variable!
]
$2)
fi
])

dnl Checks for programs.
AC_PROG_CC

dnl Use -Wall if possible
[
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
]

if test -z "$PKG_CONFIG"; then
  PKG_CONFIG=pkg-config
fi
AC_SUBST(PKG_CONFIG)

if test -z "$XML_CONFIG"; then
  AC_CHECK_PROG(XML_CONFIG, xml2-config, xml2-config, xml-config)
fi
AC_SUBST(XML_CONFIG)

if test -z "$GTK_CONFIG"; then
  GTK_CONFIG=gtk-config
fi

GTK_CFLAGS="$GTK_CONFIG --cflags"
GTK_LIBS="$GTK_CONFIG --libs"

dnl Warn the user if stuff is missing...
rox_CHECK_EXISTS([$GTK_CONFIG],
		   [You need to install the gtk-devel package before compiling:
		    http://www.gtk.org])

dnl Make sure we have gdk-pixbuf
AC_MSG_CHECKING(for gdk-pixbuf library)
if test -z "$GDK_PIXBUF_CONFIG"; then
  GDK_PIXBUF_CONFIG=gdk-pixbuf-config
fi
GDK_PIXBUF_CFLAGS=`$GDK_PIXBUF_CONFIG --cflags`
GDK_PIXBUF_LIBS=`$GDK_PIXBUF_CONFIG --libs`
[
if [ -n "$GDK_PIXBUF_LIBS" ]; then
]
  AC_MSG_RESULT(yes - use '$GDK_PIXBUF_LIBS')
else
  AC_MSG_ERROR(can't run '$GDK_PIXBUF_CONFIG --libs' - make sure it is in your PATH)
fi

AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(GDK_PIXBUF_CFLAGS)
AC_SUBST(GDK_PIXBUF_LIBS)

rox_CHECK_EXISTS([$XML_CONFIG],
	   [You need to install the xml-devel package before compiling:
	    http://xmlsoft.org/])

dnl Does file(1) support '-b' ?
AC_MSG_CHECKING(whether file -b works)
if file -b / > /dev/null 2> /dev/null
then
  AC_DEFINE(FILE_B_FLAG)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for large file support)
if getconf LFS64_CFLAGS > /dev/null 2> /dev/null; then
  AC_MSG_RESULT(yes)
  LFS_CFLAGS="`getconf LFS_CFLAGS`"
  LFS_LDFLAGS="`getconf LFS_LDFLAGS`"
  LFS_LIBS="`getconf LFS_LIBS`"
  disable_vfs=yes
  AC_DEFINE(LARGE_FILE_SUPPORT)
else
  AC_MSG_RESULT(no)
  LFS_CFLAGS=""
  LFS_LDFLAGS=""
  LFS_LIBS=""
  disable_vfs=no
fi
AC_SUBST(LFS_CFLAGS)
AC_SUBST(LFS_LDFLAGS)
AC_SUBST(LFS_LIBS)

dnl Checks for header files.
AC_PATH_X
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h mntent.h sys/ucred.h sys/mntent.h)
AC_CHECK_HEADERS(regex.h iconv.h)

rox_ARG_WITH(vfs,
  [  --with-vfs[=prefix]     use libvfs for virtual file system [search it in prefix/include and prefix/lib]])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_CHECK_FUNCS(gethostname unsetenv mkdir rmdir strdup strtol getopt_long)

VFS_LIBS=""
VFS_CFLAGS=""
if test "$disable_vfs" != "yes" ; then
  AC_MSG_CHECKING(for vfs library)
  if test x"$with_vfs_sign" = xyes; then
    if test x"$with_vfs_arg" != x; then
      vfs_includes="-I${with_vfs_arg}/include"
      vfs_libs="-L${with_vfs_arg}/lib -R${with_vfs_arg}/lib"
      AC_MSG_RESULT(yes - use '$vfs_libs')
    else
      vfs_includes=""
      vfs_libs=""
      AC_MSG_RESULT(yes)
    fi
    CFLAGS="$CFLAGS $vfs_includes"
    LDFLAGS="$LDFLAGS $vfs_libs"
    VFS_CFLAGS="$vfs_includes"
    VFS_LIBS="$vfs_libs"
  else
    AC_MSG_RESULT(no)
  fi
fi
AC_SUBST(VFS_CFLAGS)
AC_SUBST(VFS_LIBS)

dnl Extract version info from AppInfo.xml
AC_MSG_CHECKING(extracting version information)
[
VERSION=`sed -n 's/^.*<Version>\([.0-9]*\).*<\/Version>.*$/\1/p' ../AppInfo.xml`
]
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_MSG_RESULT(version $VERSION)

dnl Check for the Midnight Commander VFS library
if test "$disable_vfs" != "yes" ; then
  AC_CHECK_LIB(vfs, mc_stat, , , `$GTK_CONFIG --libs`)
fi

dnl Check for libpng
dnl Slackware doesn't have png_set_palette_to_rgb compiled in!
LIBPNG=""
AC_CHECK_LIB(png, png_set_palette_to_rgb,
  AC_TRY_CPP([#include <png.h>], png=yes, png=no),
  png=no,
  -lz -lm)
if test "$png" = "yes" ; then
  AC_MSG_CHECKING([if libpng version is >= 1.0.1])
  oldLIBS=$LIBS
  LIBS="$LIBS -lpng -lz -lm"
  AC_TRY_RUN(
[#include <stdlib.h>
#include <png.h>
int main(int argc, char **argv)
{
#ifdef PNG_LIBPNG_VER
  if (PNG_LIBPNG_VER >= 10001)
	exit(0);
  else
	exit(1);
#else
  exit(2);
#endif
}
], png=yes, png=no, png=no)
  AC_MSG_RESULT($png)
  LIBS=$oldLIBS
  if test "$png" = "yes" ; then
    LIBPNG="-lpng -lz -lm"
    AC_DEFINE(HAVE_LIBPNG)
  fi
fi
AC_SUBST(LIBPNG)

AC_OUTPUT(Makefile)
